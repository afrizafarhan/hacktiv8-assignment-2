{
	"info": {
		"_postman_id": "2238cdd9-a202-473e-bb18-9fc72f497600",
		"name": "Hacktiv8",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16730961"
	},
	"item": [
		{
			"name": "assignment-2",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Login with invalid payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body should have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal('fail');\r",
											"    pm.expect(responseJson.message).to.equal('Invalid request value');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with wrong usename dan password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body should have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal('fail');\r",
											"    pm.expect(responseJson.message).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"hacktiv8\",\r\n    \"password\": \"asdasd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with valid payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body should have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal('success');\r",
											"    pm.expect(responseJson.data).to.be.an('object');\r",
											"    pm.expect(responseJson.data.token).to.be.a('string');\r",
											"    pm.environment.set('token', responseJson.data.token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"hacktiv8\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Invalid Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body should have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal('fail');\r",
											"    pm.expect(responseJson.message).to.equal('Invalid request value');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\",\r\n    \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/auth/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Username Already Used",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body should have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal('fail');\r",
											"    pm.expect(responseJson.message).to.equal('Username sudah digunakan');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"hacktiv8\",\r\n    \"password\": \"123456\",\r\n    \"name\": \"hacktiv8\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/auth/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Valid Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 201 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body should have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal('success');\r",
											"    pm.expect(responseJson.message).to.equal('Berhasil register user');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"farhan\",\r\n    \"password\": \"123456\",\r\n    \"name\": \"farhan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/auth/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "User Detail With Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 401 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "jioaskdjokasdokasokd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/users/hacktiv8",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"hacktiv8"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Detail With Valid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body should have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal('success');\r",
											"    pm.expect(responseJson.data).to.be.an('object');\r",
											"    pm.expect(responseJson.data.user).to.be.a('object');\r",
											"    pm.expect(responseJson.data.user.username).to.be.a('string');\r",
											"    pm.expect(responseJson.data.user.name).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/users/user-h4ck71v8",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"user-h4ck71v8"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body should have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal('success');\r",
											"    pm.expect(responseJson.data).to.be.an('object');\r",
											"    pm.expect(responseJson.data.token).to.be.a('string');\r",
											"    pm.environment.set('token', responseJson.data.token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"username\": \"farhan\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Detail With Unauthorized user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 403 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/users/user-h4ck71v8",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"user-h4ck71v8"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}